'use client';

import React, { useState, useEffect, useCallback, ChangeEvent, FormEvent, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import { PlusCircle, X, FileUp, ChevronDown } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import dynamic from 'next/dynamic';
import 'react-quill/dist/quill.snow.css';

// Define a type for the Delta object from Quill
interface DeltaOperation {
  insert?: any;
  delete?: number;
  retain?: number;
  attributes?: Record<string, any>;
}

interface DeltaType {
  ops: DeltaOperation[];
  retain: (length: number, attributes?: Record<string, any>) => DeltaType;
  insert: (text: string, attributes?: Record<string, any>) => DeltaType;
  delete: (length: number) => DeltaType;
  filter: (predicate: (op: DeltaOperation) => boolean) => DeltaOperation[];
  forEach: (predicate: (op: DeltaOperation) => void) => void;
  map: <T>(predicate: (op: DeltaOperation) => T) => T[];
  partition: (predicate: (op: DeltaOperation) => boolean) => [DeltaOperation[], DeltaOperation[]];
  reduce: <T>(predicate: (acc: T, op: DeltaOperation, index: number) => T, initial: T) => T;
  chop: () => DeltaType;
  length: () => number;
  slice: (start?: number, end?: number) => DeltaType;
  compose: (other: DeltaType) => DeltaType;
  concat: (other: DeltaType) => DeltaType;
  diff: (other: DeltaType, index?: number) => DeltaType;
  eachLine: (predicate: (line: DeltaType, attributes: Record<string, any>, index: number) => any, newline?: string) => void;
  transform: (other: DeltaType, priority?: boolean) => DeltaType;
  transformPosition: (index: number, priority?: boolean) => number;
}

interface Position { x?: number; y?: number; page?: number; }
interface Styles {
  fontSize?: number;
  fontWeight?: 'normal' | 'bold';
  textAlign?: 'left' | 'center' | 'right';
  color?: string;
}
interface Placeholder {
  id: string;
  name: string;
  description?: string;
  type: 'text' | 'date' | 'checkbox' | 'signature';
  defaultValue?: string;
  required: boolean;
  styles?: Styles;
  position?: Position;
}
interface LogoSettings { position?: Position; size?: { width?: number; height?: number }; }

interface LogoSize {
  width: number;
  height: number;
}

interface SignatureSettings {
  enabled: boolean;
  label: string;
  position: { x: number; y: number };
}

// Group the placeholders by category for better organization
const PLACEHOLDER_CATEGORIES = {
  Patient: [
    "{{patient_name}}",
    "{{patient_dob}}",
    "{{patient_doi}}",
    "{{patient_address}}",
  ],
  Provider: [
    "{{provider_name}}",
    "{{provider_credentials}}",
    "{{provider_fax_br}}",
    "{{provider_fax_mr}}",
    "{{provider_email_br}}",
    "{{provider_email_mr}}",
    "{{provider_mail_br}}",
    "{{provider_mail_mr}}",
    "{{provider_smart_portal_br}}",
    "{{provider_smart_portal_mr}}",
    "{{provider_smart_folder}}",
  ],
  Signatures: [
    "{{signature_patient}}",
    "{{signature_provider}}",
    "{{witness_name}}",
    "{{signature_witness}}",
  ],
  Dates: [
    "{{current_date}}",
    "{{dos_range}}",
  ],
  Documentation: [
    "{{document_id}}",
    "{{case_number}}",
    "{{provider_submission_methods}}",
  ],
};

// Flatten the categories for backward compatibility
const PREDEFINED_PLACEHOLDERS = Object.values(PLACEHOLDER_CATEGORIES).flat();

interface TextBlock {
  id: string;
  content: string;
  position: Position;
  styles: Styles;
}

interface AffidavitTemplateFormProps {
  mode: 'create' | 'edit';
  initialData?: {
    id?: string;
    name?: string;
    filePath?: string;
    logoPath?: string | null;
    fontFamily?: string;
    fontSize?: number;
    structure?: {
      placeholders?: Placeholder[];
      header?: { text?: string };
      footer?: { text?: string };
      logoSettings?: LogoSettings;
      textBlocks?: TextBlock[];
      signatureSettings?: SignatureSettings;
    };
  };
  templateName: string;
  placeholders: Placeholder[];
  headerText: string;
  footerText: string;
  logoPath: string | null;
  logoPosition: Position;
  logoSize: LogoSize;
  textBlocks: TextBlock[];
  signatureSettings: SignatureSettings;
  defaultFontFamily: string;
  defaultFontSize: number;
  onTemplateNameChange: (name: string) => void;
  onPlaceholdersChange: (placeholders: Placeholder[]) => void;
  onHeaderTextChange: (text: string) => void;
  onFooterTextChange: (text: string) => void;
  onLogoPathChange: (path: string | null) => void;
  onLogoPositionChange: (position: Position) => void;
  onLogoSizeChange: (size: LogoSize) => void;
  onTextBlocksChange: (textBlocks: TextBlock[]) => void;
  onSignatureSettingsChange: (settings: SignatureSettings) => void;
  onDefaultFontFamilyChange: (font: string) => void;
  onDefaultFontSizeChange?: (size: number) => void;
  onSubmit: (event: FormEvent) => Promise<void>;
  isSubmitting: boolean;
  onBaseTemplateFileChange?: (file: File | null) => void;
  bodyContent?: string;
  onBodyContentChange: (content: string) => void;
}

// Dynamically import ReactQuill and forward the ref
const ReactQuill = dynamic(
  async () => {
    const { default: RQ } = await import('react-quill');
    // eslint-disable-next-line react/display-name
    return ({ forwardedRef, ...props }: { forwardedRef: React.Ref<any>, [key: string]: any }) => <RQ ref={forwardedRef} {...props} />;
  },
  {
    ssr: false,
  }
);

// Define standard font families
const standardFonts = [
  "Arial",
  "Helvetica",
  "Times New Roman",
  "Courier New",
  "Verdana",
  "Georgia",
  "Roboto", // Common web font
  "Lato",   // Common web font
  "Open Sans", // Common web font
];

// Add custom styles for the placeholders
const customStyles = `
  .affidavit-placeholder {
    background-color: #e8f0fe;
    color: #1a73e8;
    font-weight: bold;
    padding: 2px 4px;
    border-radius: 3px;
    cursor: pointer;
    position: relative;
    white-space: nowrap;
  }

  .affidavit-placeholder:hover {
    background-color: #d0e1fc;
  }

  .ql-placeholder {
    position: relative;
    width: 28px;
    height: 24px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: #444;
    background: none;
    border: none;
    cursor: pointer;
  }
  
  .ql-placeholder:hover {
    color: #06c;
  }
  
  .ql-placeholder::after {
    content: '{ }';
  }
  
  .placeholder-dropdown-content {
    z-index: 1000;
    min-width: 200px;
  }
`;

export function AffidavitTemplateForm({
  mode,
  initialData,
  templateName,
  placeholders,
  headerText,
  footerText,
  logoPath,
  logoPosition,
  logoSize,
  textBlocks,
  signatureSettings,
  defaultFontFamily,
  defaultFontSize,
  onTemplateNameChange,
  onPlaceholdersChange,
  onHeaderTextChange,
  onFooterTextChange,
  onLogoPathChange,
  onLogoPositionChange,
  onLogoSizeChange,
  onTextBlocksChange,
  onSubmit,
  isSubmitting,
  onSignatureSettingsChange,
  onDefaultFontFamilyChange,
  onDefaultFontSizeChange,
  onBaseTemplateFileChange,
  bodyContent = '',
  onBodyContentChange,
}: AffidavitTemplateFormProps) {
  const router = useRouter();
  const [baseTemplateFile, setBaseTemplateFile] = useState<File | null>(null);
  const [selectedLogoFile, setSelectedLogoFile] = useState<File | null>(null);
  const [isUploadingLogo, setIsUploadingLogo] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const quillRef = useRef<any>(null);
  const placeholderToolbarRef = useRef<HTMLDivElement | null>(null);

  const addPlaceholder = () => {
    const newPlaceholder: Placeholder = {
      id: crypto.randomUUID(),
      name: PREDEFINED_PLACEHOLDERS[0],
      type: 'text',
      required: false,
      position: { x: 50, y: 100 + placeholders.length * 30, page: 1 },
      styles: { fontSize: 12, fontWeight: 'normal', textAlign: 'left' }
    };
    onPlaceholdersChange([...placeholders, newPlaceholder]);
  };

  const removePlaceholder = (id: string) => {
    onPlaceholdersChange(placeholders.filter(p => p.id !== id));
  };

  const updatePlaceholder = (
    id: string,
    field: keyof Placeholder | 'position.x' | 'position.y' | 'position.page' | 'styles.fontSize' | 'styles.fontWeight' | 'styles.textAlign' | 'styles.color',
    value: any
  ) => {
    const newPlaceholders = placeholders.map(p => {
      if (p.id !== id) return p;
      const updatedP = { ...p };
      if (field.startsWith('position.')) {
        const key = field.split('.')[1] as keyof Placeholder['position'];
        updatedP.position = { ...(updatedP.position || {}), [key]: value ? parseFloat(value) : undefined };
      } else if (field.startsWith('styles.')) {
        const key = field.split('.')[1] as keyof Placeholder['styles'];
        let styleValue = value;
        if (key === 'fontSize') {
          styleValue = value ? parseInt(value) : undefined;
        }
        updatedP.styles = { ...(updatedP.styles || {}), [key]: styleValue };
      } else {
        (updatedP as any)[field] = value;
      }
      return updatedP;
    });
    onPlaceholdersChange(newPlaceholders);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] ?? null;
    setBaseTemplateFile(file);
    onBaseTemplateFileChange?.(file);
  };

  const handleLogoFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedLogoFile(file);
      setUploadError(null);
      handleLogoUpload(file);
    } else {
      setSelectedLogoFile(null);
    }
  };

  const handleLogoUpload = useCallback(async (file: File | null) => {
    if (!file) return;

    setIsUploadingLogo(true);
    setUploadError(null);
    const formData = new FormData();
    formData.append('logo', file);

    try {
      const response = await fetch('/api/upload/logo', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Logo upload failed');
      }

      const result = await response.json();
      onLogoPathChange(result.filePath);
      setSelectedLogoFile(null);

    } catch (error: any) {
      console.error("Logo upload error:", error);
      setUploadError(error.message || 'An error occurred during upload.');
    } finally {
      setIsUploadingLogo(false);
    }
  }, [onLogoPathChange]);

  const addTextBlock = () => {
    const newTextBlock: TextBlock = {
      id: crypto.randomUUID(),
      content: 'New Text Block',
      position: { x: 50, y: 150 + textBlocks.length * 50, page: 1 },
      styles: { fontSize: 12, fontWeight: 'normal', textAlign: 'left' },
    };
    onTextBlocksChange([...textBlocks, newTextBlock]);
  };

  const removeTextBlock = (id: string) => {
    onTextBlocksChange(textBlocks.filter(tb => tb.id !== id));
  };

  const updateTextBlock = (
    id: string,
    field: keyof TextBlock | 'position.x' | 'position.y' | 'styles.fontSize' | 'styles.fontWeight' | 'styles.textAlign' | 'styles.color',
    value: any
  ) => {
    const newTextBlocks = textBlocks.map(tb => {
      if (tb.id !== id) return tb;
      const updatedTb = { ...tb };
      if (field.startsWith('position.')) {
        const key = field.split('.')[1] as keyof TextBlock['position'];
        updatedTb.position = { ...(updatedTb.position || {}), [key]: value ? parseFloat(value) : undefined };
      } else if (field.startsWith('styles.')) {
        const key = field.split('.')[1] as keyof TextBlock['styles'];
        let styleValue = value;
        if (key === 'fontSize') {
          styleValue = value ? parseInt(value) : undefined;
        }
        updatedTb.styles = { ...(updatedTb.styles || {}), [key]: styleValue };
      } else {
        (updatedTb as any)[field] = value;
      }
      return updatedTb;
    });
    onTextBlocksChange(newTextBlocks);
  };

  const handleSignatureSettingChange = (
    field: keyof SignatureSettings | 'position.x' | 'position.y',
    value: string | number | boolean
  ) => {
    const newSettings = { ...signatureSettings };
    if (field === 'enabled') {
      newSettings.enabled = value as boolean;
    } else if (field === 'label') {
      newSettings.label = value as string;
    } else if (field === 'position.x') {
      newSettings.position = { ...newSettings.position, x: Number(value) || 0 };
    } else if (field === 'position.y') {
      newSettings.position = { ...newSettings.position, y: Number(value) || 0 };
    }
    onSignatureSettingsChange(newSettings);
  };

  // Enhanced insertPlaceholder function to use the custom blot and prevent duplicates
  const insertPlaceholder = (placeholder: string) => {
    const quill = quillRef.current?.getEditor();
    if (quill) {
      // Add a small flag to prevent double insertion
      if ((window as any).__isInsertingPlaceholder) return;
      (window as any).__isInsertingPlaceholder = true;
      
      setTimeout(() => {
        (window as any).__isInsertingPlaceholder = false;
      }, 100);
      
      const range = quill.getSelection(true);
      
      // Use the custom placeholder blot if available
      try {
        quill.insertText(range.index, placeholder, {
          'placeholder': placeholder,
          'background': '#e8f0fe',
          'color': '#1a73e8',
          'bold': true,
        });
      } catch (error) {
        // Fallback if custom blot fails
        quill.insertText(range.index, placeholder, {
          'background': '#e8f0fe',
          'color': '#1a73e8',
          'bold': true,
        });
      }
      
      quill.setSelection(range.index + placeholder.length, 0, 'user');
      quill.focus();
    }
  };

  // Function to register the placeholder blot
  const registerPlaceholderBlot = useCallback(() => {
    if (!quillRef.current?.getEditor()) return;
    
    const Quill = quillRef.current.getEditor().constructor;
    
    try {
      const Inline = Quill.import('blots/inline');
      
      class PlaceholderBlot extends Inline {
        static create(value: string) {
          const node = super.create();
          node.setAttribute('data-placeholder', value);
          node.innerText = value;
          return node;
        }
        
        static formats(node: HTMLElement) {
          return node.getAttribute('data-placeholder');
        }
      }
      
      PlaceholderBlot.blotName = 'placeholder';
      PlaceholderBlot.tagName = 'span';
      PlaceholderBlot.className = 'affidavit-placeholder';
      
      Quill.register(PlaceholderBlot);
    } catch (error) {
      console.warn('Could not register custom placeholder blot', error);
    }
  }, []);

  // Function to initialize Quill with custom formats for placeholders
  const initQuill = useCallback(() => {
    if (!quillRef.current?.getEditor()) return;
    
    const quill = quillRef.current.getEditor();
    
    // Register placeholder format matcher
    const placeholderRegex = /\{\{[a-z_]+\}\}/g;
    
    quill.clipboard.addMatcher(Node.TEXT_NODE, (node: Text, delta: DeltaType) => {
      if (typeof node.data !== 'string') return delta;
      
      let newDelta = delta;
      const matches = node.data.match(placeholderRegex);
      
      if (matches) {
        let lastIndex = 0;
        matches.forEach((match: string) => {
          const index = node.data.indexOf(match, lastIndex);
          if (index !== -1) {
            // Add text before the placeholder
            const Delta = quill.constructor.import('delta');
            
            // Add text before the placeholder
            newDelta = newDelta.compose(
              new Delta().retain(index - lastIndex).insert(node.data.slice(lastIndex, index))
            );
            
            // Add the placeholder with formatting
            newDelta = newDelta.compose(
              new Delta().insert(match, {
                'placeholder': match,
                'background': '#e8f0fe',
                'color': '#1a73e8',
                'bold': true,
              })
            );
            
            lastIndex = index + match.length;
          }
        });
        
        // Add any remaining text
        if (lastIndex < node.data.length) {
          const Delta = quill.constructor.import('delta');
          newDelta = newDelta.compose(
            new Delta().insert(node.data.slice(lastIndex))
          );
        }
        
        return newDelta;
      }
      
      return delta;
    });
  }, []);
  
  // Initialize Quill on component mount
  useEffect(() => {
    if (quillRef.current?.getEditor()) {
      registerPlaceholderBlot();
      initQuill();
      
      // Create a single shared placeholder dropdown for both buttons
      const placeholderDropdown = document.createElement('div');
      placeholderDropdown.className = 'placeholder-dropdown-content hidden bg-white shadow-lg rounded-md border p-2 w-64 max-h-96 overflow-y-auto';
      placeholderDropdown.style.position = 'absolute';
      placeholderDropdown.style.zIndex = '1000';
      document.body.appendChild(placeholderDropdown);
      
      // Populate the dropdown content
      Object.entries(PLACEHOLDER_CATEGORIES).forEach(([category, placeholders]) => {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'mb-3';
        
        const categoryHeader = document.createElement('h3');
        categoryHeader.className = 'text-sm font-semibold mb-1 text-gray-700';
        categoryHeader.textContent = category;
        categoryDiv.appendChild(categoryHeader);
        
        placeholders.forEach(placeholder => {
          const placeholderItem = document.createElement('div');
          placeholderItem.className = 'py-1 px-2 text-sm hover:bg-gray-100 rounded cursor-pointer';
          placeholderItem.textContent = placeholder;
          placeholderItem.onclick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            insertPlaceholder(placeholder);
            placeholderDropdown.classList.add('hidden');
          };
          categoryDiv.appendChild(placeholderItem);
        });
        
        placeholderDropdown.appendChild(categoryDiv);
      });
      
      // Add placeholder button to toolbar
      const toolbar = document.querySelector('.ql-toolbar');
      if (toolbar) {
        const placeholderButton = document.createElement('button');
        placeholderButton.className = 'ql-placeholder';
        placeholderButton.innerHTML = '{ }';
        placeholderButton.title = 'Insert Placeholder';
        
        // Insert before the clean button
        const cleanButton = toolbar.querySelector('.ql-clean');
        if (cleanButton && cleanButton.parentNode) {
          cleanButton.parentNode.insertBefore(placeholderButton, cleanButton);
        } else {
          toolbar.appendChild(placeholderButton);
        }
        
        // Attach click handler to the placeholder button
        placeholderButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // Toggle dropdown visibility
          if (placeholderDropdown.classList.contains('hidden')) {
            // Position dropdown under the button
            const rect = placeholderButton.getBoundingClientRect();
            placeholderDropdown.style.top = `${rect.bottom}px`;
            placeholderDropdown.style.left = `${rect.left}px`;
            placeholderDropdown.classList.remove('hidden');
          } else {
            placeholderDropdown.classList.add('hidden');
          }
        });
      }
    }
    
    // Add an event listener to close the dropdown when clicking outside
    const handleClickOutside = (event: MouseEvent) => {
      const dropdown = document.querySelector('.placeholder-dropdown-content');
      const button = document.querySelector('.ql-placeholder');
      
      if (dropdown && 
          !dropdown.contains(event.target as Node) && 
          button && 
          !button.contains(event.target as Node)) {
        dropdown.classList.add('hidden');
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      // Clean up the dropdown element on unmount
      const dropdown = document.querySelector('.placeholder-dropdown-content');
      if (dropdown && dropdown.parentNode) {
        dropdown.parentNode.removeChild(dropdown);
      }
    };
  }, [registerPlaceholderBlot, initQuill]);

  return (
    <div className="space-y-8">
<div className="space-y-8">

      {/* Document Editor with ReactQuill */}
      <Card>
        <CardHeader>
          <CardTitle>Document Content</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="min-h-[300px]">
            <ReactQuill
              forwardedRef={quillRef}
              value={bodyContent}
              onChange={onBodyContentChange}
              theme="snow"
              placeholder="Enter document content here..."
            />
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Template Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="templateName">Template Name</Label>
            <Input
              id="templateName"
              value={templateName}
              onChange={(e) => onTemplateNameChange(e.target.value)}
              placeholder="e.g., Standard Patient Affidavit"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="baseTemplateFile">Base Template Document (Optional PDF)</Label>
            <Input
              id="baseTemplateFile"
              type="file"
              accept=".pdf"
              onChange={handleFileChange}
            />
            {baseTemplateFile && (
              <p className="text-sm text-muted-foreground">Selected: {baseTemplateFile.name}</p>
            )}
          </div>
          <div className="space-y-2">
            <Label htmlFor="headerText">Header Text (Optional)</Label>
            <Textarea
              id="headerText"
              value={headerText}
              onChange={(e) => onHeaderTextChange(e.target.value)}
              placeholder="Text to appear at the top of each page"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="footerText">Footer Text (Optional)</Label>
            <Textarea
              id="footerText"
              value={footerText}
              onChange={(e) => onFooterTextChange(e.target.value)}
              placeholder="Text to appear at the bottom of each page (e.g., page numbers)"
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="defaultFontFamily">Default Font Family</Label>
              <Select
                value={defaultFontFamily}
                onValueChange={onDefaultFontFamilyChange}
              >
                <SelectTrigger id="defaultFontFamily">
                  <SelectValue placeholder="Select a font" />
                </SelectTrigger>
                <SelectContent>
                  {standardFonts.map((font) => (
                    <SelectItem key={font} value={font}>
                      {font}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="defaultFontSize">Default Font Size (pt)</Label>
              <Input
                id="defaultFontSize"
                type="number"
                value={defaultFontSize}
                onChange={(e) => {
                  const newSize = Number(e.target.value) || 12;
                  if (onDefaultFontSizeChange) {
                    onDefaultFontSizeChange(newSize);
                  }
                }}
                placeholder="e.g., 12"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Line (Page 1)</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Replace the placeholder UI section with this simplified version */}
      <div className="flex flex-wrap gap-2 mb-4 p-3 border rounded bg-gray-50">
        <div className="w-full flex justify-between items-center mb-2">
          <Label className="text-sm font-medium">Insert Placeholder:</Label>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                Select Placeholder <ChevronDown className="ml-2 h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56">
              {Object.entries(PLACEHOLDER_CATEGORIES).map(([category, placeholders]) => (
                <React.Fragment key={category}>
                  <DropdownMenuLabel>{category}</DropdownMenuLabel>
                  <DropdownMenuGroup>
                    {placeholders.map(placeholder => (
                      <DropdownMenuItem
                        key={placeholder}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          insertPlaceholder(placeholder);
                        }}
                        className="cursor-pointer"
                      >
                        {placeholder}
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuGroup>
                  <DropdownMenuSeparator />
                </React.Fragment>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
              className="cursor-pointer"
            >
              {placeholder.name}
            </DropdownMenuItem>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Buttons</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {PREDEFINED_PLACEHOLDERS.map((ph) => (
            <Button
              key={ph}
              type="button"
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(ph);
              }}
              className="text-xs h-7 px-2 py-1 bg-white hover:bg-blue-50"
            >
              {ph}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Signature Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="signatureEnabled"
              checked={signatureSettings.enabled}
              onCheckedChange={(checked) => handleSignatureSettingChange('enabled', checked)}
            />
            <Label htmlFor="signatureEnabled">Enable Signature Line on Page 1</Label>
          </div>

          {signatureSettings.enabled && (
            <div className="space-y-4 pl-8 border-l ml-3 pt-2">
              <div className="space-y-2">
                <Label htmlFor="signatureLabel">Signature Label</Label>
                <Input
                  id="signatureLabel"
                  value={signatureSettings.label}
                  onChange={(e) => handleSignatureSettingChange('label', e.target.value)}
                  placeholder="e.g., Patient Signature:"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="signatureX">X Position (pt)</Label>
                  <Input
                    id="signatureX"
                    type="number"
                    value={signatureSettings.position.x}
                    onChange={(e) => handleSignatureSettingChange('position.x', e.target.value)}
                    placeholder="e.g., 50"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signatureY">Y Position (pt)</Label>
                  <Input
                    id="signatureY"
                    type="number"
                    value={signatureSettings.position.y}
                    onChange={(e) => handleSignatureSettingChange('position.y', e.target.value)}
                    placeholder="e.g., 700"
                  />
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Logo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile">Upload Logo</Label>
            <Input
              id="logoFile"
              type="file"
              accept="image/png, image/jpeg, image/gif, image/svg+xml"
              onChange={handleLogoFileChange}
              disabled={isUploadingLogo}
            />
            {isUploadingLogo && <p className="text-sm text-muted-foreground">Uploading...</p>}
            {uploadError && <p className="text-sm text-red-600">{uploadError}</p>}
            {logoPath && !isUploadingLogo && !selectedLogoFile && (
              <p className="text-sm text-muted-foreground mt-2">
                Current logo: <a href={logoPath} target="_blank" rel="noopener noreferrer" className="underline">{logoPath.split('/').pop()}</a>
              </p>
            )}
          </div>
          {logoPath && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoX">Logo X Position (pt)</Label>
                  <Input
                    id="logoX"
                    type="number"
                    value={logoPosition.x}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, x: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoY">Logo Y Position (pt)</Label>
                  <Input
                    id="logoY"
                    type="number"
                    value={logoPosition.y}
                    onChange={(e) => onLogoPositionChange({ ...logoPosition, y: Number(e.target.value) || 0 })}
                    placeholder="e.g., 40"
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="logoWidth">Logo Width (pt)</Label>
                  <Input
                    id="logoWidth"
                    type="number"
                    value={logoSize.width}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, width: Number(e.target.value) || 50 })}
                    placeholder="e.g., 100"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="logoHeight">Logo Height (pt)</Label>
                  <Input
                    id="logoHeight"
                    type="number"
                    value={logoSize.height}
                    onChange={(e) => onLogoSizeChange({ ...logoSize, height: Number(e.target.value) || 0 })}
                    placeholder="e.g., 50 (auto if 0)"
                  />
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Text Blocks</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {textBlocks.map((textBlock, index) => (
            <div key={textBlock.id} className="p-4 border rounded space-y-4 relative bg-secondary/30">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                onClick={() => removeTextBlock(textBlock.id)}
                className="absolute top-2 right-2"
              >
                Remove
              </Button>
              <div className="space-y-2">
                <Label htmlFor={`textBlockContent-${index}`}>Text Content</Label>
                <Textarea
                  id={`textBlockContent-${index}`}
                  value={textBlock.content}
                  onChange={(e) => updateTextBlock(textBlock.id, 'content', e.target.value)}
                  placeholder="Enter the static text here..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockX-${index}`}>X Position (pt)</Label>
                  <Input
                    id={`textBlockX-${index}`}
                    type="number"
                    value={textBlock.position.x}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.x', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockY-${index}`}>Y Position (pt)</Label>
                  <Input
                    id={`textBlockY-${index}`}
                    type="number"
                    value={textBlock.position.y}
                    onChange={(e) => updateTextBlock(textBlock.id, 'position.y', e.target.value)}
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontSize-${index}`}>Font Size (pt)</Label>
                  <Input
                    id={`textBlockFontSize-${index}`}
                    type="number"
                    value={textBlock.styles.fontSize}
                    onChange={(e) => updateTextBlock(textBlock.id, 'styles.fontSize', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockFontWeight-${index}`}>Font Weight</Label>
                  <Select
                    value={textBlock.styles.fontWeight}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.fontWeight', value)}
                  >
                    <SelectTrigger id={`textBlockFontWeight-${index}`}>
                      <SelectValue placeholder="Select weight" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="normal">Normal</SelectItem>
                      <SelectItem value="bold">Bold</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor={`textBlockTextAlign-${index}`}>Text Align</Label>
                  <Select
                    value={textBlock.styles.textAlign || 'left'}
                    onValueChange={(value) => updateTextBlock(textBlock.id, 'styles.textAlign', value)}
                  >
                    <SelectTrigger id={`textBlockTextAlign-${index}`}>
                      <SelectValue placeholder="Select alignment" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="left">Left</SelectItem>
                      <SelectItem value="center">Center</SelectItem>
                      <SelectItem value="right">Right</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor={`textBlockColor-${index}`}>Text Color</Label>
                <Input
                  id={`textBlockColor-${index}`}
                  type="color"
                  value={textBlock.styles.color || '#000000'}
                  onChange={(e) => updateTextBlock(textBlock.id, 'styles.color', e.target.value)}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Placeholders</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {placeholders.map((placeholder) => (
            <DropdownMenuItem
              key={placeholder.name}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                insertPlaceholder(placeholder.name);
              }}
                    value={logoSize.width}