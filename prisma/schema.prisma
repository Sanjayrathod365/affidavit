generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               String              @default("STAFF")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  affidavitTemplates AffidavitTemplate[]
  auditLogs          AuditLog[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id           String            @id @default(cuid())
  patientName  String
  dateOfBirth  DateTime?
  dateOfInjury DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  affidavits   Affidavit[]
  providers    PatientProvider[]
}

model Provider {
  id                 String            @id @default(cuid())
  name               String
  email              String?
  brEmailId          String?
  mrEmailId          String?
  phone              String?
  fax                String?
  address            String?
  zipCode            String?
  city               String?
  state              String?
  attentionInfo      String?
  hipaaRequired      Boolean           @default(false)
  hipaaSample        String?
  usesFax            Boolean           @default(false)
  usesEmail          Boolean           @default(false)
  usesMail           Boolean           @default(false)
  usesSmartPortal    Boolean           @default(false)
  brSubmissionMethod String            @default("NONE")
  mrSubmissionMethod String            @default("NONE")
  brFaxNumber        String?
  mrFaxNumber        String?
  brMailingAddress   String?
  mrMailingAddress   String?
  brSmartPortal      String?
  mrSmartPortal      String?
  smartFolder        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  brAffidavitTemplateId String?
  mrAffidavitTemplateId String?

  affidavits         Affidavit[]
  patients           PatientProvider[]

  brAffidavitTemplate   AffidavitTemplate? @relation("ProviderBRTemplate", fields: [brAffidavitTemplateId], references: [id], onDelete: SetNull)
  mrAffidavitTemplate   AffidavitTemplate? @relation("ProviderMRTemplate", fields: [mrAffidavitTemplateId], references: [id], onDelete: SetNull)
}

model PatientProvider {
  id          String    @id @default(cuid())
  patientId   String
  providerId  String
  requestType String
  dosStart    DateTime
  dosEnd      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dosType     String?
  provider    Provider  @relation(fields: [providerId], references: [id])
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model AffidavitTemplate {
  id          String      @id @default(cuid())
  name        String
  description String?
  filePath    String?     // Path to base PDF
  bodyContent String?     // Rich text editor content
  structure   Json        // For placeholders, text blocks, etc.
  version     Int         @default(1)
  isActive    Boolean     @default(true)
  logoPath    String?
  fontFamily  String?     @default("Arial")
  fontSize    Int?        @default(12)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  affidavits  Affidavit[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  providersBR Provider[] @relation("ProviderBRTemplate")
  providersMR Provider[] @relation("ProviderMRTemplate")
}

model AuditLog {
  id               String   @id @default(cuid())
  timestamp        DateTime @default(now())
  userId           String?
  userEmail        String?
  action           String
  targetEntityType String?
  targetEntityId   String?
  details          Json?
  user             User?    @relation(fields: [userId], references: [id])
}

model Affidavit {
  id                String             @id @default(cuid())
  patientId         String
  providerId        String
  content           String
  status            String             @default("DRAFT")
  verificationCode  String?
  templateId        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  generatedFilePath String?
  provider          Provider           @relation(fields: [providerId], references: [id])
  patient           Patient            @relation(fields: [patientId], references: [id])
  template          AffidavitTemplate? @relation(fields: [templateId], references: [id])
}

// Model for storing custom, user-designed affidavit templates
model CustomAffidavitTemplate {
  id        String   @id @default(cuid())
  name      String
  elements  Json // Stores the array of TemplateElement objects from the frontend editor
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
